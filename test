def toolLiquibase() {
    tool name: 'liquibase', type: 'org.jenkinsci.plugins.liquibase.install.LiquibaseInstallation'
}

pipeline {
    agent any

    environment {
        DEVL_CREDS = credentials('liquibase-service-devl')
        INTGD_CREDS = credentials('liquibase-service-intgd')
        CERT_CREDS = credentials('liquibase-service-cert')
        PINTGD_CREDS = credentials('liquibase-service-pintgd')
        NEWREL_CREDS = credentials('liquibase-service-newrel')
        WEBDEVL_CREDS = credentials('liquibase-service-webdevl')
        WEBTEST_CREDS = credentials('liquibase-service-webtest')
        LINKTEST_CREDS = credentials('liquibase-service-linktest')
        ORMAUD_CREDS = credentials('liquibase-service-ormaud')
        DEVL2_CREDS = credentials('liquibase-service-devl2')
        BCV1_CREDS = credentials('liquibase-service-bcv1')
        STAGE_CREDS = credentials('liquibase-service-stagedb')
        IRSDEVL_CREDS = credentials('liquibase-service-irsdevl')
        IRSINTGD_CREDS = credentials('liquibase-service-irsintgd')
        PPRD3_CREDS = credentials('liquibase-service-pprd3')
        CONV1_CREDS = credentials('liquibase-service-conv1')
        PERF_CREDS = credentials('liquibase-service-perf')
        VBA1_CREDS = credentials('liquibase-service-vba1')
        LIQUIBASE_HOME = "$HOME/tools/org.jenkinsci.plugins.liquibase.install.LiquibaseInstallation/liquibase"
        SLACK_CHANNEL = '#crp_modernization_jenkins_pipeline'
        S3_BUCKET = 'project-crp-ss-liquibase-logs'
        S3_PREFIX = 'RollbackLogs'
    }

    parameters {
        choice(name: 'DATABASE-Rollback', choices: [
            'DEV-Rollback', 'DEV-Date-Rollback', 'DEV-Count-Rollback',
            'INTGD-Rollback', 'INTGD-Date-Rollback', 'INTGD-Count-Rollback',
            'CERT-Rollback', 'CERT-Date-Rollback', 'CERT-Count-Rollback',
            'PINTGD-Rollback', 'PINTGD-Date-Rollback', 'PINTGD-Count-Rollback',
            'NEWREL-Rollback', 'NEWREL-Date-Rollback', 'NEWREL-Count-Rollback',
            'WEBDEVL-Rollback', 'WEBDEVL-Date-Rollback', 'WEBDEVL-Count-Rollback',
            'WEBTEST-Rollback', 'WEBTEST-Date-Rollback', 'WEBTEST-Count-Rollback',
            'LINKTEST-Rollback', 'LINKTEST-Date-Rollback', 'LINKTEST-Count-Rollback',
            'ORMAUD-Rollback', 'ORMAUD-Date-Rollback', 'ORMAUD-Count-Rollback',
            'DEVL2-Rollback', 'DEVL2-Date-Rollback', 'DEVL2-Count-Rollback',
            'BCV1-Rollback', 'BCV1-Date-Rollback', 'BCV1-Count-Rollback',
            'STAGE-Rollback', 'STAGE-Date-Rollback', 'STAGE-Count-Rollback',
            'IRSDEVL-Rollback', 'IRSDEVL-Date-Rollback', 'IRSDEVL-Count-Rollback',
            'IRSINTGD-Rollback', 'IRSINTGD-Date-Rollback', 'IRSINTGD-Count-Rollback',
            'PPRD3-Rollback', 'PPRD3-Date-Rollback', 'PPRD3-Count-Rollback',
            'CONV1-Rollback', 'CONV1-Date-Rollback', 'CONV1-Count-Rollback',
            'PERF-Rollback', 'PERF-Date-Rollback', 'PERF-Count-Rollback',
            'VBA1-Rollback', 'VBA1-Date-Rollback', 'VBA1-Count-Rollback'
        ], description: 'Please select a database for rollback')
        choice(name: 'SCHEMA', choices: ['CORPPROD', 'CP'], description: 'Please select a database schema')
        string(name: 'ROLLBACK_DATE', defaultValue: '', description: 'Rollback Date (yyyy-MM-dd)')
        number(name: 'ROLLBACK_COUNT', defaultValue: '', description: 'Rollback count (number)')
        string(name: 'TAG', defaultValue: '', description: 'Tag for Liquibase rollback')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-liquibase-poc', url: 'https://github.com/department-of-veterans-affairs/crp-db-liquibase-poc.git']])
            }
        }

        stage('Rollback') {
            steps {
                toolLiquibase()
                script {
                    def dbRollback = params.DATABASE_ROLLBACK.split('-')
                    def database = dbRollback[0]
                    def action = dbRollback[1]
                    def propertiesFile = "PropertiesFiles/${database}.properties"
                    def credsEnvVar = "${database}_CREDS"
                    def timestamp = new Date().format("yyyyMMddHHmmss")
                    def s3LogKey = "${S3_PREFIX}/${database}-rollback-${timestamp}.log"

                    def liquibaseCommand = ""

                    switch (action) {
                        case 'Rollback':
                            liquibaseCommand = """
                            ${LIQUIBASE_HOME}/liquibase rollback \
                                --defaults-file=${propertiesFile} \
                                --username=\${${credsEnvVar}_USR} \
                                --password=\${${credsEnvVar}_PSW} \
                                --log-file=${BUILD_TAG}-rollback.log \
                                --default-schema-name=${params.SCHEMA} \
                                --tag=${params.TAG}
                            """
                            break
                        case 'Date-Rollback':
                            def rollbackDate = params.ROLLBACK_DATE ?: '2025-01-01'
                            liquibaseCommand = """
                            ${LIQUIBASE_HOME}/liquibase rollback-to-date --date=${rollbackDate} \
                                --defaults-file=${propertiesFile} \
                                --username=\${${credsEnvVar}_USR} \
                                --password=\${${credsEnvVar}_PSW} \
                                --log-file=${BUILD_TAG}-rollback-to-date.log \
                                --default-schema-name=${params.SCHEMA} \
                                --tag=${params.TAG}
                            """
                            break
                        case 'Count-Rollback':
                            def rollbackCount = params.ROLLBACK_COUNT ?: '1'
                            liquibaseCommand = """
                            ${LIQUIBASE_HOME}/liquibase rollback-count --count=${rollbackCount} \
                                --defaults-file=${propertiesFile} \
                                --username=\${${credsEnvVar}_USR} \
                                --password=\${${credsEnvVar}_PSW} \
                                --log-file=${BUILD_TAG}-rollback-count.log \
                                --default-schema-name=${params.SCHEMA} \
                                --tag=${params.TAG}
                            """
                            break
                        default:
                            error "Unknown rollback action: ${action}"
                    }

                    // Perform rollback
                    sh "echo 'Performing ${action} on ${database}'"
                    sh liquibaseCommand

                    // Upload log file to S3
                    sh "aws s3 cp ${BUILD_TAG}-${action}.log s3://${S3_BUCKET}/${s3LogKey}"

                    // Check if the upload was successful
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "Log file successfully uploaded to S3: s3://${S3_BUCKET}/${s3LogKey}"
                    } else {
                        error "Failed to upload log file to S3."
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: env.SLACK_CHANNEL, color: 'good', message: "Liquibase rollback to ${params.DATABASE_ROLLBACK} successful! Logs available at s3://${S3_BUCKET}/${s3LogKey}")
            }
        }

        failure {
            script {
                slackSend(channel: env.SLACK_CHANNEL, color: 'danger', message: "Liquibase rollback to ${params.DATABASE_ROLLBACK} failed. Check the logs at s3://${S3_BUCKET}/${s3LogKey} and investigate.")
            }
        }
    }
}
